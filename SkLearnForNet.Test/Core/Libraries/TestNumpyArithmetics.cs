using System;
using NUnit.Framework;
using SkLearn.Core.Libraries.Numpy;

namespace SkLearn.Test.Core.Libraries
{
    [TestFixture]
    public class TestNumpyArithmetics
    {
        [Test]
        public void TestAddNumpyArraysOfSameDimensions()
        {
            double[,,] array1 = { { { 0.8498362688651786, 0.38847262219392775, 0.491529490731744, 0.14519928481748345 }, { 0.7016401109880209, 0.9559815834146775, 0.24616147376815534, 0.49604242026690226 }, { 0.2542089747022154, 0.27716146772691064, 0.9914409615786711, 0.116915835428262 } }, { { 0.38492600320251036, 0.04455663085917927, 0.1726474566458548, 0.2543754431463955 }, { 0.11273591863545018, 0.8474118940812869, 0.21211414003536688, 0.3491955367429401 }, { 0.21874285575081864, 0.20394376525199898, 0.872450640099929, 0.6191935922156495 } }, { { 0.1880355870914292, 0.689014552012491, 0.5099566042459871, 0.5178654988076001 }, { 0.8319721008181516, 0.8978320425252354, 0.22334773151980836, 0.40578844056105323 }, { 0.21778219349883654, 0.1509668440151467, 0.95399825367282, 0.9995919847841824 } } };
            double[,,] array2 = { { { 0.07694844908148424, 0.5288160712623504, 0.3792202486806373, 0.5940367298164035 }, { 0.3973269191820903, 0.3582676794660168, 0.8430088888797947, 0.37934496969434683 }, { 0.25189904976568034, 0.8073710681615235, 0.1774358552323244, 0.7076336528251679 } }, { { 0.7789548061224858, 0.4850445179121837, 0.2982691389242257, 0.22747586215385052 }, { 0.0328561661282305, 0.07861920146169654, 0.33433443588683887, 0.2598678356060834 }, { 0.9315034852227749, 0.75368447831429, 0.10094476519438134, 0.36068138713747655 } }, { { 0.8614400166012504, 0.27408887442254204, 0.03493910525319177, 0.5542832129891039 }, { 0.14470334841295873, 0.6071379174227812, 0.1177081066667428, 0.04609821035876871 }, { 0.8237942845174137, 0.2612629939924991, 0.765998886312385, 0.17551526024053787 } } };
            double[,,] expectedSum = { { { 0.9267847179466628, 0.9172886934562782, 0.8707497394123813, 0.739236014633887 }, { 1.0989670301701113, 1.3142492628806943, 1.08917036264795, 0.8753873899612491 }, { 0.5061080244678957, 1.0845325358884341, 1.1688768168109955, 0.8245494882534299 } }, { { 1.1638808093249962, 0.529601148771363, 0.4709165955700805, 0.481851305300246 }, { 0.14559208476368068, 0.9260310955429835, 0.5464485759222057, 0.6090633723490235 }, { 1.1502463409735935, 0.957628243566289, 0.9733954052943103, 0.9798749793531261 } }, { { 1.0494756036926796, 0.963103426435033, 0.5448957094991789, 1.0721487117967041 }, { 0.9766754492311104, 1.5049699599480166, 0.34105583818655116, 0.45188665091982194 }, { 1.0415764780162502, 0.4122298380076458, 1.719997139985205, 1.1751072450247202 } } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);
            NumpyArray<double> a2 = NumpyArrayFactory.From(array2);

            NumpyArray<double> actual = Numpy.Add<double, double, double>(a1, a2);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0.8498362688651786, array1[0, 0, 0]);
            Assert.AreEqual(0.07694844908148424, array2[0, 0, 0]);
        }

        [Test]
        public void TestSubtractNumpyArraysOfSameDimensions()
        {
            double[,,] array1 = { { { 0.9673749067232011, 0.17350622499772217, 0.9000476038828717, 0.7266244329288203 }, { 0.22353907839599485, 0.23248353696683566, 0.36402169354356717, 0.15384846115767137 }, { 0.44083234067668164, 0.012467563784072766, 0.5936396539498044, 0.8188359707546785 } }, { { 0.8627437541857379, 0.3943737675538783, 0.09271485661483347, 0.3660128685405868 }, { 0.8418143727793828, 0.2040780944283319, 0.17955181075907845, 0.549541289384567 }, { 0.9939321703484207, 0.7895272411863011, 0.9317169039593375, 0.59575265403416 } }, { { 0.6674307339124519, 0.055049148577092755, 0.12381891934772726, 0.24946968542032666 }, { 0.6742292300988915, 0.9754137921692683, 0.3522934820812117, 0.74634080242001 }, { 0.7682051721898836, 0.0263842264900096, 0.8136178902919051, 0.2798934487096709 } } };
            double[,,] array2 = { { { 0.9224495177071387, 0.29796181083567275, 0.5175100951639882, 0.6542756565190692 }, { 0.9623202204867541, 0.6694509183819332, 0.38160467072790005, 0.8599259268866072 }, { 0.81880956887177, 0.9110594452129724, 0.5948127489733466, 0.7265074470255293 } }, { { 0.5009920681969805, 0.7276562575477666, 0.7144604939537049, 0.49722014892083133 }, { 0.8661885100810023, 0.09655770497140337, 0.9479916194008094, 0.36751424450935977 }, { 0.5657339252537145, 0.01531589076382378, 0.5629561554746562, 0.07824454840109085 } }, { { 0.5520307389842075, 0.4822147272988835, 0.7179496380742317, 0.9018537249755472 }, { 0.8453669776008881, 0.8152191736962529, 0.9410147067841551, 0.5208031133886327 }, { 0.1490847404555553, 0.5739451462512779, 0.59502452733931, 0.37200066876236704 } } };
            double[,,] expectedSubtraction = { { { 0.04492538901606247, -0.12445558583795058, 0.3825375087188836, 0.07234877640975113 }, { -0.7387811420907593, -0.4369673814150975, -0.017582977184332882, -0.7060774657289358 }, { -0.3779772281950884, -0.8985918814288997, -0.0011730950235421256, 0.09232852372914924 } }, { { 0.3617516859887574, -0.3332824899938883, -0.6217456373388714, -0.13120728038024454 }, { -0.024374137301619525, 0.10752038945692854, -0.768439808641731, 0.18202704487520727 }, { 0.4281982450947063, 0.7742113504224774, 0.3687607484846813, 0.5175081056330691 } }, { { 0.11539999492824438, -0.42716557872179073, -0.5941307187265045, -0.6523840395552205 }, { -0.17113774750199662, 0.16019461847301542, -0.5887212247029434, 0.22553768903137728 }, { 0.6191204317343283, -0.5475609197612683, 0.21859336295259513, -0.09210722005269611 } } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);
            NumpyArray<double> a2 = NumpyArrayFactory.From(array2);

            NumpyArray<double> actual = Numpy.Subtract<double, double, double>(a1, a2);
            TestHelper.AssertEqualData(actual, expectedSubtraction);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0.9673749067232011, array1[0, 0, 0]);
            Assert.AreEqual(0.9224495177071387, array2[0, 0, 0]);
        }

        [Test]
        public void TestAddNumpyArraysOfEffectiveSameDimensions()
        {
            double[,,] array1 = { { { 0.4170640029082975, 0.9130867305506143, 0.29794793156381294, 0.5299497904131077 }, { 0.00825814674726666, 0.7151176866518705, 0.49686017222433965, 0.6403374109003205 }, { 0.6134435249964159, 0.8879566399316161, 0.0817639085165488, 0.280935135078337 } }, { { 0.31185748830788773, 0.7234722835327531, 0.08921560319547084, 0.3569414588141334 }, { 0.5777856324135705, 0.7401476775052548, 0.19588402879036515, 0.0011274114294698157 }, { 0.8808670967703545, 0.21506574781197862, 0.4977976611223446, 0.16879339353533263 } }, { { 0.9140756727661614, 0.27782099724715903, 0.5751358616914545, 0.32960300909660367 }, { 0.4304081761108789, 0.3509534267925164, 0.23812750225381074, 0.8597835433729738 }, { 0.5277616817658799, 0.7990086756209345, 0.5430201994030612, 0.9382266035384039 } } };
            double[,,,] array2 = { { { { 0.19403276705579242 }, { 0.6603825200711022 }, { 0.8326644558827556 }, { 0.6107743903896594 } }, { { 0.2958521384414262 }, { 0.14615810851098243 }, { 0.4444257543150363 }, { 0.16258174693177485 } }, { { 0.4487177828377653 }, { 0.031310429085841585 }, { 0.18064627188170912 }, { 0.8389000359237494 } } }, { { { 0.2893813399296401 }, { 0.07860622260783423 }, { 0.009846045020411087 }, { 0.456920464163149 } }, { { 0.4293846344172514 }, { 0.09854809037353507 }, { 0.18518700539641175 }, { 0.7367445620170411 } }, { { 0.3122760561183673 }, { 0.8649874171703765 }, { 0.9076505400548064 }, { 0.6931671596867695 } } }, { { { 0.2460527512697681 }, { 0.616925595555249 }, { 0.6254611158069124 }, { 0.02969426987460999 } }, { { 0.36687742071302154 }, { 0.7860486621736786 }, { 0.056948370168793616 }, { 0.5960751644148502 } }, { { 0.5777823201575247 }, { 0.639505439533982 }, { 0.5680176175771618 }, { 0.33736533242013556 } } } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);
            NumpyArray<double> a2 = NumpyArrayFactory.From(array2);

            try
            {
                Numpy.Add<double, double, double>(a1, a2);
                Assert.Fail("This operation should not be permitted.");
            }
            catch (NumpyOperationException ignore)
            {
            }
            catch (Exception ex)
            {
                Assert.Fail("Invalid exception type");
            }
        }

        [Test]
        public void TestSubtractNumpyArraysOfEffectiveSameDimensions()
        {
            double[,,] array1 = { { { 0.4170640029082975, 0.9130867305506143, 0.29794793156381294, 0.5299497904131077 }, { 0.00825814674726666, 0.7151176866518705, 0.49686017222433965, 0.6403374109003205 }, { 0.6134435249964159, 0.8879566399316161, 0.0817639085165488, 0.280935135078337 } }, { { 0.31185748830788773, 0.7234722835327531, 0.08921560319547084, 0.3569414588141334 }, { 0.5777856324135705, 0.7401476775052548, 0.19588402879036515, 0.0011274114294698157 }, { 0.8808670967703545, 0.21506574781197862, 0.4977976611223446, 0.16879339353533263 } }, { { 0.9140756727661614, 0.27782099724715903, 0.5751358616914545, 0.32960300909660367 }, { 0.4304081761108789, 0.3509534267925164, 0.23812750225381074, 0.8597835433729738 }, { 0.5277616817658799, 0.7990086756209345, 0.5430201994030612, 0.9382266035384039 } } };
            double[,,,] array2 = { { { { 0.19403276705579242 }, { 0.6603825200711022 }, { 0.8326644558827556 }, { 0.6107743903896594 } }, { { 0.2958521384414262 }, { 0.14615810851098243 }, { 0.4444257543150363 }, { 0.16258174693177485 } }, { { 0.4487177828377653 }, { 0.031310429085841585 }, { 0.18064627188170912 }, { 0.8389000359237494 } } }, { { { 0.2893813399296401 }, { 0.07860622260783423 }, { 0.009846045020411087 }, { 0.456920464163149 } }, { { 0.4293846344172514 }, { 0.09854809037353507 }, { 0.18518700539641175 }, { 0.7367445620170411 } }, { { 0.3122760561183673 }, { 0.8649874171703765 }, { 0.9076505400548064 }, { 0.6931671596867695 } } }, { { { 0.2460527512697681 }, { 0.616925595555249 }, { 0.6254611158069124 }, { 0.02969426987460999 } }, { { 0.36687742071302154 }, { 0.7860486621736786 }, { 0.056948370168793616 }, { 0.5960751644148502 } }, { { 0.5777823201575247 }, { 0.639505439533982 }, { 0.5680176175771618 }, { 0.33736533242013556 } } } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);
            NumpyArray<double> a2 = NumpyArrayFactory.From(array2);

            try
            {
                Numpy.Subtract<double, double, double>(a1, a2);
                Assert.Fail("This operation should not be permitted.");
            }
            catch (NumpyOperationException ignore)
            {
            }
            catch (Exception ex)
            {
                Assert.Fail("Invalid exception type");
            }
        }

        [Test]
        public void TestAddNumpyArraysDoubleValues()
        {
            double[,,] array1 = { { { 0.9907355250598483, 0.09380870949537834, 0.7605137976001763, 0.2712778281742999 }, { 0.5742120623278772, 0.8075871893633569, 0.22982877866312879, 0.049912237261181436 }, { 0.39752930082122007, 0.45805552432308294, 0.6465087451171136, 0.819184252330756 } }, { { 0.24864952625986836, 0.8414667761465863, 0.9124723397098614, 0.11109845208192304 }, { 0.14951024940040003, 0.47439902976038284, 0.5132547838672745, 0.6723974412681042 }, { 0.7487065679123297, 0.8123510063214008, 0.9401613808617376, 0.7781873999301265 } }, { { 0.2445002351352369, 0.9807817713671773, 0.10548226568349495, 0.41737440697382566 }, { 0.3190032943715726, 0.3903115551228713, 0.7365644636867695, 0.22870839090373818 }, { 0.8675260776214133, 0.2079918924400741, 0.3275938016096027, 0.5903470570968307 } } };
            double[,,] expectedSum = { { { 2.9907355250598484, 2.093808709495378, 2.7605137976001766, 2.2712778281743 }, { 2.5742120623278772, 2.807587189363357, 2.229828778663129, 2.0499122372611813 }, { 2.39752930082122, 2.458055524323083, 2.6465087451171136, 2.819184252330756 } }, { { 2.2486495262598685, 2.841466776146586, 2.9124723397098613, 2.111098452081923 }, { 2.1495102494004, 2.4743990297603826, 2.5132547838672745, 2.672397441268104 }, { 2.74870656791233, 2.812351006321401, 2.9401613808617375, 2.7781873999301263 } }, { { 2.244500235135237, 2.980781771367177, 2.105482265683495, 2.417374406973826 }, { 2.319003294371573, 2.3903115551228713, 2.7365644636867694, 2.228708390903738 }, { 2.867526077621413, 2.207991892440074, 2.327593801609603, 2.5903470570968308 } } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<double> actual = Numpy.Add<double, double>(a1, 2.0);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0.9907355250598483, array1[0, 0, 0]);
        }

        [Test]
        public void TestSubtractNumpyArraysDoubleValues()
        {
            double[,,] array1 = { { { 0.43499481593998646, 0.7573237823905206, 0.7518277718026464, 0.8587217605361808 }, { 0.09973582950632809, 0.2708720222513584, 0.4776737791550385, 0.13635804315292788 }, { 0.1056676869931058, 0.5235763014696284, 0.7882642104153451, 0.1099774691627966 } }, { { 0.43897234535514784, 0.8565637498308796, 0.6772051115414676, 0.9108067016348489 }, { 0.19254364296990012, 0.06799253962175489, 0.8657849458424134, 0.5544002300758911 }, { 0.7082415879012663, 0.22467735687480028, 0.5213865245123241, 0.7098537695864228 } }, { { 0.8929615355609667, 0.4564015275979555, 0.9376468557525769, 0.5680957373357487 }, { 0.6526421336070526, 0.0029701468477381088, 0.788175758221807, 0.43705518815742805 }, { 0.3330507019670116, 0.34741215862565145, 0.18273838427414424, 0.03047752635848411 } } };
            double[,,] expectedSubtraction = { { { -0.06500518406001354, 0.25732378239052056, 0.25182777180264637, 0.35872176053618077 }, { -0.4002641704936719, -0.22912797774864158, -0.022326220844961497, -0.3636419568470721 }, { -0.3943323130068942, 0.023576301469628413, 0.2882642104153451, -0.3900225308372034 } }, { { -0.06102765464485216, 0.3565637498308796, 0.17720511154146756, 0.4108067016348489 }, { -0.3074563570300999, -0.4320074603782451, 0.3657849458424134, 0.05440023007589112 }, { 0.20824158790126635, -0.2753226431251997, 0.021386524512324145, 0.20985376958642277 } }, { { 0.3929615355609667, -0.04359847240204451, 0.4376468557525769, 0.0680957373357487 }, { 0.1526421336070526, -0.4970298531522619, 0.28817575822180697, -0.06294481184257195 }, { -0.1669492980329884, -0.15258784137434855, -0.31726161572585576, -0.4695224736415159 } } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<double> actual = Numpy.Subtract<double, double>(a1, 0.5);
            TestHelper.AssertEqualData(actual, expectedSubtraction);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0.43499481593998646, array1[0, 0, 0]);
        }

        [Test]
        public void TestAddNumpyArraysByteValue()
        {
            byte[,,] array1 = { { { 29, 9, 21, 2 }, { 2, 10, 7, 2 }, { 13, 15, 12, 4 } }, { { 17, 21, 28, 2 }, { 3, 8, 14, 24 }, { 14, 22, 6, 8 } }, { { 22, 12, 15, 1 }, { 15, 12, 23, 19 }, { 0, 14, 14, 21 } } };
            byte[,,] expectedSum = { { { 49, 29, 41, 22 }, { 22, 30, 27, 22 }, { 33, 35, 32, 24 } }, { { 37, 41, 48, 22 }, { 23, 28, 34, 44 }, { 34, 42, 26, 28 } }, { { 42, 32, 35, 21 }, { 35, 32, 43, 39 }, { 20, 34, 34, 41 } } };

            NumpyArray<byte> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<byte> actual = Numpy.Add<byte, byte>(a1, (byte)20);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(29, array1[0, 0, 0]);
        }

        [Test]
        public void TestSubtractNumpyArraysByteValue()
        {
            /*
             * This test was removed because the byte data type in C# is unsigned as opposed to Java where it is a signed data type.
             * For that reason, it can not cast it to by values with an error of overflowing the values.
             *
             * In practice, this is most likely never going to happen. Most of the data types will be long and double.
             */

            // byte[,,] array1 = { { { 27, 33, 33, 18 }, { 17, 23, 8, 10 }, { 33, 21, 13, 34 } }, { { 11, 17, 6, 26 }, { 7, 6, 32, 9 }, { 9, 6, 5, 34 } }, { { 21, 12, 20, 24 }, { 29, 14, 8, 13 }, { 33, 9, 23, 20 } } };
            // byte[,,] expectedSubtraction = { { { 25, 31, 31, 16 }, { 15, 21, 6, 8 }, { 31, 19, 11, 32 } }, { { 9, 15, 4, 24 }, { 5, 4, 30, 7 }, { 7, 4, 3, 32 } }, { { 19, 10, 18, 22 }, { 27, 12, 6, 11 }, { 31, 7, 21, 18 } } };
            //
            // NumpyArray<byte> a1 = NumpyArrayFactory.From(array1);
            //
            // sbyte v = -2;
            // NumpyArray<byte> actual = Numpy.Subtract<byte, byte>(a1, (byte)v);
            // TestHelper.AssertEqualData(actual, expectedSubtraction);
            //
            // // Test the computations didn't impact the original source
            // Assert.AreEqual(27, array1[0, 0, 0]);
        }

        [Test]
        public void TestAddNumpyArraysShortValue()
        {
            short[,,] array1 = { { { 16, 14, 18, 16 }, { 4, 0, 27, 27 }, { 11, 25, 1, 26 } }, { { 27, 19, 14, 26 }, { 13, 19, 19, 8 }, { 5, 20, 24, 9 } }, { { 6, 25, 12, 7 }, { 2, 13, 11, 15 }, { 6, 14, 7, 20 } } };
            short[,,] expectedSum = { { { 36, 34, 38, 36 }, { 24, 20, 47, 47 }, { 31, 45, 21, 46 } }, { { 47, 39, 34, 46 }, { 33, 39, 39, 28 }, { 25, 40, 44, 29 } }, { { 26, 45, 32, 27 }, { 22, 33, 31, 35 }, { 26, 34, 27, 40 } } };

            NumpyArray<short> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<short> actual = Numpy.Add<short, short>(a1, (short)20);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(16, array1[0, 0, 0]);
        }

        [Test]
        public void TestSubtractNumpyArraysShortValue()
        {
            short[,,] array1 = { { { 20, 33, 25, 16 }, { 27, 9, 27, 30 }, { 5, 10, 11, 34 } }, { { 23, 17, 34, 34 }, { 8, 5, 33, 7 }, { 9, 11, 8, 25 } }, { { 8, 25, 8, 17 }, { 14, 6, 24, 23 }, { 14, 18, 9, 27 } } };
            short[,,] expectedSubtraction = { { { 18, 31, 23, 14 }, { 25, 7, 25, 28 }, { 3, 8, 9, 32 } }, { { 21, 15, 32, 32 }, { 6, 3, 31, 5 }, { 7, 9, 6, 23 } }, { { 6, 23, 6, 15 }, { 12, 4, 22, 21 }, { 12, 16, 7, 25 } } };

            NumpyArray<short> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<short> actual = Numpy.Subtract<short, short>(a1, (short)2);
            TestHelper.AssertEqualData(actual, expectedSubtraction);

            // Test the computations didn't impact the original source
            Assert.AreEqual(20, array1[0, 0, 0]);
        }

        [Test]
        public void TestAddNumpyArraysIntValue()
        {
            int[,,] array1 = { { { 0, 20, 23, 15 }, { 28, 13, 21, 4 }, { 3, 6, 21, 29 } }, { { 17, 21, 28, 9 }, { 15, 22, 11, 1 }, { 18, 8, 18, 9 } }, { { 17, 1, 2, 3 }, { 0, 22, 17, 15 }, { 25, 7, 27, 5 } } };
            int[,,] expectedSum = { { { 20, 40, 43, 35 }, { 48, 33, 41, 24 }, { 23, 26, 41, 49 } }, { { 37, 41, 48, 29 }, { 35, 42, 31, 21 }, { 38, 28, 38, 29 } }, { { 37, 21, 22, 23 }, { 20, 42, 37, 35 }, { 45, 27, 47, 25 } } };

            NumpyArray<int> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<int> actual = Numpy.Add<int, int>(a1, 20);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0, array1[0, 0, 0]);
        }

        [Test]
        public void TestSubtractNumpyArraysIntValue()
        {
            int[,,] array1 = { { { 6, 25, 14, 7 }, { 16, 12, 34, 33 }, { 5, 12, 30, 16 } }, { { 10, 20, 5, 34 }, { 24, 10, 31, 31 }, { 21, 13, 28, 8 } }, { { 8, 20, 11, 12 }, { 34, 13, 34, 12 }, { 25, 13, 31, 17 } } };
            int[,,] expectedSubtraction = { { { 4, 23, 12, 5 }, { 14, 10, 32, 31 }, { 3, 10, 28, 14 } }, { { 8, 18, 3, 32 }, { 22, 8, 29, 29 }, { 19, 11, 26, 6 } }, { { 6, 18, 9, 10 }, { 32, 11, 32, 10 }, { 23, 11, 29, 15 } } };

            NumpyArray<int> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<int> actual = Numpy.Subtract<int, int>(a1, 2);
            TestHelper.AssertEqualData(actual, expectedSubtraction);

            // Test the computations didn't impact the original source
            Assert.AreEqual(6, array1[0, 0, 0]);
        }

        [Test]
        public void TestAddNumpyArraysLongValue()
        {
            long[,,] array1 = { { { 6, 28, 22, 17 }, { 26, 20, 8, 4 }, { 23, 10, 24, 7 } }, { { 25, 1, 20, 13 }, { 23, 4, 21, 5 }, { 14, 14, 28, 3 } }, { { 4, 6, 13, 12 }, { 13, 11, 28, 17 }, { 17, 22, 15, 2 } } };
            long[,,] expectedSum = { { { 26, 48, 42, 37 }, { 46, 40, 28, 24 }, { 43, 30, 44, 27 } }, { { 45, 21, 40, 33 }, { 43, 24, 41, 25 }, { 34, 34, 48, 23 } }, { { 24, 26, 33, 32 }, { 33, 31, 48, 37 }, { 37, 42, 35, 22 } } };

            NumpyArray<long> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<long> actual = Numpy.Add<long, long>(a1, (long)20);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(6, array1[0, 0, 0]);
        }

        [Test]
        public void TestSubtractNumpyArraysLongValue()
        {
            long[,,] array1 = { { { 26, 16, 10, 19 }, { 31, 10, 32, 6 }, { 11, 29, 25, 17 } }, { { 6, 31, 32, 26 }, { 19, 28, 32, 32 }, { 32, 27, 20, 18 } }, { { 5, 22, 8, 30 }, { 14, 32, 6, 11 }, { 5, 15, 19, 29 } } };
            long[,,] expectedSubtraction = { { { 24, 14, 8, 17 }, { 29, 8, 30, 4 }, { 9, 27, 23, 15 } }, { { 4, 29, 30, 24 }, { 17, 26, 30, 30 }, { 30, 25, 18, 16 } }, { { 3, 20, 6, 28 }, { 12, 30, 4, 9 }, { 3, 13, 17, 27 } } };

            NumpyArray<long> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<long> actual = Numpy.Subtract<long, long>(a1, (long)2);
            TestHelper.AssertEqualData(actual, expectedSubtraction);

            // Test the computations didn't impact the original source
            Assert.AreEqual(26, array1[0, 0, 0]);
        }

        [Test]
        public void TestAddNumpyArraysFloatValue()
        {
            float[,,] array1 = { { { 24.636015f, 20.889547f, 5.531764f, 27.127632f }, { 26.876032f, 4.2244225f, 3.2533963f, 29.580786f }, { 18.756655f, 8.06099f, 4.589737f, 12.1915655f } }, { { 28.413414f, 5.773226f, 19.82812f, 13.515765f }, { 15.142787f, 24.391577f, 5.1407757f, 24.662132f }, { 14.756189f, 0.58043253f, 3.3942122f, 21.059649f } }, { { 22.070795f, 20.682585f, 23.28233f, 23.47345f }, { 13.425268f, 14.71812f, 17.835907f, 17.57331f }, { 0.035388723f, 28.206497f, 17.778812f, 11.408034f } } };
            float[,,] expectedSum = { { { 4.636015f, 0.88954735f, -14.468236f, 7.127632f }, { 6.876032f, -15.775578f, -16.746603f, 9.580786f }, { -1.2433453f, -11.93901f, -15.410263f, -7.8084345f } }, { { 8.413414f, -14.226774f, -0.17188072f, -6.484235f }, { -4.857213f, 4.391577f, -14.859224f, 4.6621323f }, { -5.2438107f, -19.419567f, -16.605787f, 1.0596485f } }, { { 2.070795f, 0.68258476f, 3.2823296f, 3.4734497f }, { -6.574732f, -5.2818804f, -2.164093f, -2.4266891f }, { -19.964611f, 8.206497f, -2.2211876f, -8.591966f } } };

            NumpyArray<float> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<float> actual = Numpy.Add<float, float>(a1, -20.0f);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(24.636015f, array1[0, 0, 0]);
        }

        [Test]
        public void TestSubtractNumpyArraysFloatValue()
        {
            float[,,] array1 = { { { 31.434202f, 12.74824f, 12.532635f, 31.813728f }, { 19.47403f, 27.284885f, 28.679787f, 22.18431f }, { 32.80394f, 24.027885f, 6.4568844f, 11.525911f } }, { { 21.629814f, 27.382559f, 30.56584f, 16.410505f }, { 7.310533f, 31.919888f, 9.799784f, 32.397816f }, { 23.988457f, 27.969212f, 6.057625f, 24.72869f } }, { { 20.013424f, 34.569572f, 25.715137f, 10.637014f }, { 16.394077f, 13.477096f, 16.411089f, 7.875744f }, { 33.61585f, 14.8506155f, 15.588195f, 11.582356f } } };
            float[,,] expectedSubtraction = { { { 29.434202f, 10.74824f, 10.532635f, 29.813728f }, { 17.47403f, 25.284885f, 26.679787f, 20.18431f }, { 30.80394f, 22.027885f, 4.4568844f, 9.525911f } }, { { 19.629814f, 25.382559f, 28.56584f, 14.410505f }, { 5.310533f, 29.919888f, 7.7997837f, 30.397816f }, { 21.988457f, 25.969212f, 4.057625f, 22.72869f } }, { { 18.013424f, 32.569572f, 23.715137f, 8.637014f }, { 14.394077f, 11.477096f, 14.411089f, 5.875744f }, { 31.615849f, 12.8506155f, 13.588195f, 9.582356f } } };

            NumpyArray<float> a1 = NumpyArrayFactory.From(array1);

            NumpyArray<float> actual = Numpy.Subtract<float, float>(a1, 2.0f);
            TestHelper.AssertEqualData(actual, expectedSubtraction);

            // Test the computations didn't impact the original source
            Assert.AreEqual(31.434202f, array1[0, 0, 0]);
        }

        [Test]
        public void TestAddNumpyArraysWhereLastDimensionIsSame()
        {
            double[,] array1 = { { 0.5015246884702844, 0.27364364168849553 }, { 0.6832565430577351, 0.15001542342650853 }, { 0.38483109884655053, 0.19852988127352444 }, { 0.33761369938530084, 0.3835045244251444 }, { 0.7186033954779367, 0.01306414045228721 } };
            double[] array2 = { 1.0, 2.0 };
            double[,] expectedSum = { { 1.5015246884702844, 2.2736436416884955 }, { 1.683256543057735, 2.1500154234265088 }, { 1.3848310988465506, 2.1985298812735246 }, { 1.337613699385301, 2.3835045244251445 }, { 1.7186033954779367, 2.013064140452287 } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);
            NumpyArray<double> a2 = NumpyArrayFactory.From(array2);

            NumpyArray<double> actual = Numpy.Add<double, double, double>(a1, a2);
            TestHelper.AssertEqualData(actual, expectedSum);

            actual = Numpy.Add<double, double, double>(a2, a1);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0.5015246884702844, array1[0, 0]);
            Assert.AreEqual(1.0, array2[0]);
        }


        [Test]
        public void TestAddNumpyArraysWhereLastDimensionIsOne()
        {
            double[,,] array1 = { { { 14.577887064075227, 2.667991041474511, 24.115818560288425, 20.785854762426396 }, { 24.118888714966015, 9.13863242568359, 17.27864819524724, 27.685561645835346 }, { 3.6793520936753996, 14.536924578779086, 22.32587906529025, 23.352035482279568 } }, { { 28.487810251139255, 1.2836678151726766, 4.334890104799659, 1.9545024950089407 }, { 0.5653034089575626, 2.8805234448501373, 12.04901021270871, 28.533492209048212 }, { 13.364303066965238, 23.26319123214168, 15.606536996228174, 20.525831754584924 } }, { { 22.736360087481096, 1.5013205084615289, 23.977647749938708, 23.20376069236251 }, { 22.881414273595574, 6.288967645722949, 13.47437856181916, 8.576589415215622 }, { 16.197521614025174, 10.725564703052278, 10.497398025696253, 13.13451446440062 } } };
            double[,,] array2 = { { { 9.360844617718007 }, { 1.199545304902775 }, { 6.704470793340239 } }, { { 1.8875068163879338 }, { 8.667165559373597 }, { 4.303349044664615 } }, { { 4.091409567095738 }, { 1.5746026131655688 }, { 9.398201345632879 } } };
            double[,,] expectedSum = { { { 23.938731681793236, 12.028835659192518, 33.47666317800643, 30.146699380144405 }, { 25.31843401986879, 10.338177730586365, 18.478193500150013, 28.88510695073812 }, { 10.38382288701564, 21.241395372119324, 29.030349858630487, 30.056506275619807 } }, { { 30.375317067527188, 3.1711746315606106, 6.222396921187594, 3.8420093113968745 }, { 9.23246896833116, 11.547689004223734, 20.71617577208231, 37.200657768421806 }, { 17.667652111629852, 27.566540276806293, 19.90988604089279, 24.82918079924954 } }, { { 26.827769654576834, 5.592730075557267, 28.069057317034446, 27.29517025945825 }, { 24.456016886761144, 7.863570258888518, 15.048981174984728, 10.15119202838119 }, { 25.595722959658055, 20.123766048685155, 19.895599371329133, 22.5327158100335 } } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);
            NumpyArray<double> a2 = NumpyArrayFactory.From(array2);

            NumpyArray<double> actual = Numpy.Add<double, double, double>(a1, a2);
            TestHelper.AssertEqualData(actual, expectedSum);

            // Test the computations didn't impact the original source
            Assert.AreEqual(14.577887064075227, array1[0, 0, 0]);
            Assert.AreEqual(9.360844617718007, array2[0, 0, 0]);
        }

        [Test]
        public void TestSubtractNumpyArraysWhereLastDimensionIsOne()
        {
            double[,,] array1 = { { { 0.9624292569843312, 0.9812345355046648, 0.08520520815871513, 0.37154803251621904 }, { 0.8148782143379193, 0.6883081273232315, 0.6053980107183092, 0.1537770951823504 }, { 0.6251806810363421, 0.5240020082442275, 0.2888839162217396, 0.15463642525117005 } }, { { 0.1432118246020737, 0.7715927720643134, 0.32689108472173545, 0.1240964963883725 }, { 0.0717176210685897, 0.29210383922482885, 0.6822126172610509, 0.2043130762919041 }, { 0.5491388671864997, 0.25665926596939703, 0.01588545195808677, 0.20002617948452583 } }, { { 0.3959330595932993, 0.8310062244380585, 0.2842216132745141, 0.05341737153988946 }, { 0.396757995114547, 0.5152501254047959, 0.3744984209647716, 0.7821473647011414 }, { 0.3258469744015846, 0.8293097937989183, 0.45840624306302236, 0.9285127665593574 } } };
            double[,,] array2 = { { { 0.6788013293525661 }, { 0.7174653167644359 }, { 0.8634322487763614 } }, { { 0.38069749657730323 }, { 0.180399186749561 }, { 0.02435604217065057 } }, { { 0.21097680203469793 }, { 0.7853751243845115 }, { 0.7498765696349884 } } };
            double[,,] expectedSubtraction = { { { 0.28362792763176514, 0.3024332061520987, -0.593596121193851, -0.30725329683634706 }, { 0.09741289757348337, -0.02915718944120438, -0.11206730604612669, -0.5636882215820855 }, { -0.23825156774001932, -0.3394302405321339, -0.5745483325546218, -0.7087958235251913 } }, { { -0.23748567197522952, 0.3908952754870102, -0.05380641185556778, -0.25660100018893073 }, { -0.10868156568097131, 0.11170465247526784, 0.5018134305114899, 0.02391388954234308 }, { 0.5247828250158492, 0.23230322379874646, -0.0084705902125638, 0.17567013731387526 } }, { { 0.18495625755860134, 0.6200294224033606, 0.07324481123981619, -0.15755943049480847 }, { -0.3886171292699645, -0.27012499897971565, -0.4108767034197399, -0.0032277596833700795 }, { -0.4240295952334038, 0.07943322416392995, -0.29147032657196603, 0.17863619692436905 } } };

            NumpyArray<double> a1 = NumpyArrayFactory.From(array1);
            NumpyArray<double> a2 = NumpyArrayFactory.From(array2);

            NumpyArray<double> actual = Numpy.Subtract<double, double, double>(a1, a2);
            TestHelper.AssertEqualData(actual, expectedSubtraction);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0.9624292569843312, array1[0, 0, 0]);
            Assert.AreEqual(0.6788013293525661, array2[0, 0, 0]);
        }

        [Test]
        public void TestDoubleMultiplicationAndDivision()
        {
            double[,] array = { { 0.9383549975480937, 0.6707543764947346, 0.3727462159254752 }, { 0.2746844265995788, 0.30641062192634816, 0.4176566561467244 }, { 0.7149964220406743, 0.2593190510607888, 0.6630315531623971 } };
            double[,] expected = { { 9.383549975480937, 6.707543764947346, 3.7274621592547517 }, { 2.7468442659957883, 3.064106219263482, 4.1765665614672445 }, { 7.149964220406742, 2.593190510607888, 6.630315531623971 } };

            NumpyArray<double> a = NumpyArrayFactory.From(array);
            NumpyArray<double> actual = Numpy.Multiply<double, double>(a, 10);
            TestHelper.AssertEqualData(actual, expected);

            a = NumpyArrayFactory.From(expected);
            actual = Numpy.Divide(a, 10);
            TestHelper.AssertEqualData(actual, array);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0.9383549975480937, array[0, 0]);
            Assert.AreEqual(9.383549975480937, expected[0, 0]);
        }

        [Test]
        public void TestFloatMultiplicationAndDivision()
        {
            float[,] array = { { 0.9425335f, 0.74280167f }, { 0.42412087f, 0.2686771f } };
            float[,] expected = { { 9.425335f, 7.4280167f }, { 4.2412086f, 2.686771f } };

            NumpyArray<float> a = NumpyArrayFactory.From(array);
            NumpyArray<float> actual = Numpy.Multiply<float, float>(a, 10);
            TestHelper.AssertEqualData(actual, expected);

            a = NumpyArrayFactory.From(expected);
            actual = Numpy.Divide(a, 10);
            TestHelper.AssertEqualData(actual, array);

            // Test the computations didn't impact the original source
            Assert.AreEqual(0.9425335f, array[0, 0]);
            Assert.AreEqual(9.425335f, expected[0, 0]);
        }

        [Test]
        public void TestAddWhereTheTrailingDimensionsIsTheSame()
        {
            double[,,] arr1 = { { { 0.89, 0.74 }, { 0.21, 0.25 } }, { { 0.31, 0.93 }, { 0.67, 0.15 } }, { { 0.04, 0.56 }, { 0.06, 0.42 } } };
            double[,,] arr2 = { { { 0.44, 0.87 }, { 0.87, 0.98 } } };
            double[,,] expected = { { { 1.33, 1.61 }, { 1.08, 1.23 } }, { { 0.75, 1.8 }, { 1.54, 1.13 } }, { { 0.48, 1.43 }, { 0.93, 1.4 } } };
            
            NumpyArray<double> a = NumpyArrayFactory.From(arr1);
            NumpyArray<double> b = NumpyArrayFactory.From(arr2);
            NumpyArray<double> actual = Numpy.Add<double, double, double>(a, b);
            TestHelper.AssertEqualData(actual, expected, 0.009999999999999);
        }
    }
}